//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cross.DataVault.ServiceAccess.PCL.AccountManagerService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IdentityPacket", Namespace="http://schemas.datacontract.org/2004/07/Cross.DataVault.Contracts.Data")]
    public partial class IdentityPacket : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string Contact_IDField;
        
        private string Content_IDField;
        
        private System.Collections.Generic.List<string> ErrorsField;
        
        private bool HasErrorField;
        
        private string Process_IDField;
        
        private Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account SiteUserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contact_ID {
            get {
                return this.Contact_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.Contact_IDField, value) != true)) {
                    this.Contact_IDField = value;
                    this.RaisePropertyChanged("Contact_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content_ID {
            get {
                return this.Content_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.Content_IDField, value) != true)) {
                    this.Content_IDField = value;
                    this.RaisePropertyChanged("Content_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> Errors {
            get {
                return this.ErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorsField, value) != true)) {
                    this.ErrorsField = value;
                    this.RaisePropertyChanged("Errors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasError {
            get {
                return this.HasErrorField;
            }
            set {
                if ((this.HasErrorField.Equals(value) != true)) {
                    this.HasErrorField = value;
                    this.RaisePropertyChanged("HasError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Process_ID {
            get {
                return this.Process_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.Process_IDField, value) != true)) {
                    this.Process_IDField = value;
                    this.RaisePropertyChanged("Process_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account SiteUser {
            get {
                return this.SiteUserField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteUserField, value) != true)) {
                    this.SiteUserField = value;
                    this.RaisePropertyChanged("SiteUser");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/Cross.DataVault.Contracts.Data")]
    public partial class Account : object, System.ComponentModel.INotifyPropertyChanged {
        
        private byte[] AvatarField;
        
        private string Display_NameField;
        
        private string EmailField;
        
        private string First_NameField;
        
        private string HomeField;
        
        private string Last_NameField;
        
        private string MobileField;
        
        private string PasswordField;
        
        private string User_IDField;
        
        private string UsernameField;
        
        private string WorkField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Avatar {
            get {
                return this.AvatarField;
            }
            set {
                if ((object.ReferenceEquals(this.AvatarField, value) != true)) {
                    this.AvatarField = value;
                    this.RaisePropertyChanged("Avatar");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Display_Name {
            get {
                return this.Display_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Display_NameField, value) != true)) {
                    this.Display_NameField = value;
                    this.RaisePropertyChanged("Display_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string First_Name {
            get {
                return this.First_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.First_NameField, value) != true)) {
                    this.First_NameField = value;
                    this.RaisePropertyChanged("First_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Home {
            get {
                return this.HomeField;
            }
            set {
                if ((object.ReferenceEquals(this.HomeField, value) != true)) {
                    this.HomeField = value;
                    this.RaisePropertyChanged("Home");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Last_Name {
            get {
                return this.Last_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Last_NameField, value) != true)) {
                    this.Last_NameField = value;
                    this.RaisePropertyChanged("Last_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mobile {
            get {
                return this.MobileField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileField, value) != true)) {
                    this.MobileField = value;
                    this.RaisePropertyChanged("Mobile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string User_ID {
            get {
                return this.User_IDField;
            }
            set {
                if ((object.ReferenceEquals(this.User_IDField, value) != true)) {
                    this.User_IDField = value;
                    this.RaisePropertyChanged("User_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Work {
            get {
                return this.WorkField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkField, value) != true)) {
                    this.WorkField = value;
                    this.RaisePropertyChanged("Work");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountManagerService.IAccountManagement")]
    public interface IAccountManagement {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/ServiceAvailable", ReplyAction="http://tempuri.org/IAccountManagement/ServiceAvailableResponse")]
        System.IAsyncResult BeginServiceAvailable(System.AsyncCallback callback, object asyncState);
        
        bool EndServiceAvailable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Generate_AccountForCredentials", ReplyAction="http://tempuri.org/IAccountManagement/Generate_AccountForCredentialsResponse")]
        System.IAsyncResult BeginGenerate_AccountForCredentials(string username, string password, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndGenerate_AccountForCredentials(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Generate_AccountForEmail", ReplyAction="http://tempuri.org/IAccountManagement/Generate_AccountForEmailResponse")]
        System.IAsyncResult BeginGenerate_AccountForEmail(string email, string password, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndGenerate_AccountForEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Generate_AccountForUser", ReplyAction="http://tempuri.org/IAccountManagement/Generate_AccountForUserResponse")]
        System.IAsyncResult BeginGenerate_AccountForUser(Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account obj, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndGenerate_AccountForUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Generate_AccountsForUsers", ReplyAction="http://tempuri.org/IAccountManagement/Generate_AccountsForUsersResponse")]
        System.IAsyncResult BeginGenerate_AccountsForUsers(System.Collections.Generic.List<Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account> objs, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndGenerate_AccountsForUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Delete_AccountForUserID", ReplyAction="http://tempuri.org/IAccountManagement/Delete_AccountForUserIDResponse")]
        System.IAsyncResult BeginDelete_AccountForUserID(int id, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndDelete_AccountForUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Delete_AccountsForUserIDs", ReplyAction="http://tempuri.org/IAccountManagement/Delete_AccountsForUserIDsResponse")]
        System.IAsyncResult BeginDelete_AccountsForUserIDs(System.Collections.Generic.List<int> ids, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndDelete_AccountsForUserIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Disable_AccountsForUserID", ReplyAction="http://tempuri.org/IAccountManagement/Disable_AccountsForUserIDResponse")]
        System.IAsyncResult BeginDisable_AccountsForUserID(int id, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndDisable_AccountsForUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Disable_AccountsForUserIDs", ReplyAction="http://tempuri.org/IAccountManagement/Disable_AccountsForUserIDsResponse")]
        System.IAsyncResult BeginDisable_AccountsForUserIDs(System.Collections.Generic.List<int> ids, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndDisable_AccountsForUserIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Change_PasswordForUserID", ReplyAction="http://tempuri.org/IAccountManagement/Change_PasswordForUserIDResponse")]
        System.IAsyncResult BeginChange_PasswordForUserID(int id, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndChange_PasswordForUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Change_EmailForUserID", ReplyAction="http://tempuri.org/IAccountManagement/Change_EmailForUserIDResponse")]
        System.IAsyncResult BeginChange_EmailForUserID(int id, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndChange_EmailForUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Change_UsernameForUserID", ReplyAction="http://tempuri.org/IAccountManagement/Change_UsernameForUserIDResponse")]
        System.IAsyncResult BeginChange_UsernameForUserID(int id, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndChange_UsernameForUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Change_PasswordForUserIDs", ReplyAction="http://tempuri.org/IAccountManagement/Change_PasswordForUserIDsResponse")]
        System.IAsyncResult BeginChange_PasswordForUserIDs(System.Collections.Generic.List<int> id, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndChange_PasswordForUserIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Change_EmailForUserIDs", ReplyAction="http://tempuri.org/IAccountManagement/Change_EmailForUserIDsResponse")]
        System.IAsyncResult BeginChange_EmailForUserIDs(System.Collections.Generic.List<int> id, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndChange_EmailForUserIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccountManagement/Change_UsernameForUserIDs", ReplyAction="http://tempuri.org/IAccountManagement/Change_UsernameForUserIDsResponse")]
        System.IAsyncResult BeginChange_UsernameForUserIDs(System.Collections.Generic.List<int> id, System.AsyncCallback callback, object asyncState);
        
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndChange_UsernameForUserIDs(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountManagementChannel : Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ServiceAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Generate_AccountForCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Generate_AccountForCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Generate_AccountForEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Generate_AccountForEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Generate_AccountForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Generate_AccountForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Generate_AccountsForUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Generate_AccountsForUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Delete_AccountForUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Delete_AccountForUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Delete_AccountsForUserIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Delete_AccountsForUserIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Disable_AccountsForUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Disable_AccountsForUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Disable_AccountsForUserIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Disable_AccountsForUserIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Change_PasswordForUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Change_PasswordForUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Change_EmailForUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Change_EmailForUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Change_UsernameForUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Change_UsernameForUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Change_PasswordForUserIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Change_PasswordForUserIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Change_EmailForUserIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Change_EmailForUserIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Change_UsernameForUserIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Change_UsernameForUserIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountManagementClient : System.ServiceModel.ClientBase<Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement>, Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement {
        
        private BeginOperationDelegate onBeginServiceAvailableDelegate;
        
        private EndOperationDelegate onEndServiceAvailableDelegate;
        
        private System.Threading.SendOrPostCallback onServiceAvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerate_AccountForCredentialsDelegate;
        
        private EndOperationDelegate onEndGenerate_AccountForCredentialsDelegate;
        
        private System.Threading.SendOrPostCallback onGenerate_AccountForCredentialsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerate_AccountForEmailDelegate;
        
        private EndOperationDelegate onEndGenerate_AccountForEmailDelegate;
        
        private System.Threading.SendOrPostCallback onGenerate_AccountForEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerate_AccountForUserDelegate;
        
        private EndOperationDelegate onEndGenerate_AccountForUserDelegate;
        
        private System.Threading.SendOrPostCallback onGenerate_AccountForUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerate_AccountsForUsersDelegate;
        
        private EndOperationDelegate onEndGenerate_AccountsForUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGenerate_AccountsForUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginDelete_AccountForUserIDDelegate;
        
        private EndOperationDelegate onEndDelete_AccountForUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onDelete_AccountForUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginDelete_AccountsForUserIDsDelegate;
        
        private EndOperationDelegate onEndDelete_AccountsForUserIDsDelegate;
        
        private System.Threading.SendOrPostCallback onDelete_AccountsForUserIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisable_AccountsForUserIDDelegate;
        
        private EndOperationDelegate onEndDisable_AccountsForUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onDisable_AccountsForUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisable_AccountsForUserIDsDelegate;
        
        private EndOperationDelegate onEndDisable_AccountsForUserIDsDelegate;
        
        private System.Threading.SendOrPostCallback onDisable_AccountsForUserIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginChange_PasswordForUserIDDelegate;
        
        private EndOperationDelegate onEndChange_PasswordForUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onChange_PasswordForUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginChange_EmailForUserIDDelegate;
        
        private EndOperationDelegate onEndChange_EmailForUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onChange_EmailForUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginChange_UsernameForUserIDDelegate;
        
        private EndOperationDelegate onEndChange_UsernameForUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onChange_UsernameForUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginChange_PasswordForUserIDsDelegate;
        
        private EndOperationDelegate onEndChange_PasswordForUserIDsDelegate;
        
        private System.Threading.SendOrPostCallback onChange_PasswordForUserIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginChange_EmailForUserIDsDelegate;
        
        private EndOperationDelegate onEndChange_EmailForUserIDsDelegate;
        
        private System.Threading.SendOrPostCallback onChange_EmailForUserIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginChange_UsernameForUserIDsDelegate;
        
        private EndOperationDelegate onEndChange_UsernameForUserIDsDelegate;
        
        private System.Threading.SendOrPostCallback onChange_UsernameForUserIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public AccountManagementClient() : 
                base(AccountManagementClient.GetDefaultBinding(), AccountManagementClient.GetDefaultEndpointAddress()) {
        }
        
        public AccountManagementClient(EndpointConfiguration endpointConfiguration) : 
                base(AccountManagementClient.GetBindingForEndpoint(endpointConfiguration), AccountManagementClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public AccountManagementClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AccountManagementClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public AccountManagementClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AccountManagementClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public AccountManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<ServiceAvailableCompletedEventArgs> ServiceAvailableCompleted;
        
        public event System.EventHandler<Generate_AccountForCredentialsCompletedEventArgs> Generate_AccountForCredentialsCompleted;
        
        public event System.EventHandler<Generate_AccountForEmailCompletedEventArgs> Generate_AccountForEmailCompleted;
        
        public event System.EventHandler<Generate_AccountForUserCompletedEventArgs> Generate_AccountForUserCompleted;
        
        public event System.EventHandler<Generate_AccountsForUsersCompletedEventArgs> Generate_AccountsForUsersCompleted;
        
        public event System.EventHandler<Delete_AccountForUserIDCompletedEventArgs> Delete_AccountForUserIDCompleted;
        
        public event System.EventHandler<Delete_AccountsForUserIDsCompletedEventArgs> Delete_AccountsForUserIDsCompleted;
        
        public event System.EventHandler<Disable_AccountsForUserIDCompletedEventArgs> Disable_AccountsForUserIDCompleted;
        
        public event System.EventHandler<Disable_AccountsForUserIDsCompletedEventArgs> Disable_AccountsForUserIDsCompleted;
        
        public event System.EventHandler<Change_PasswordForUserIDCompletedEventArgs> Change_PasswordForUserIDCompleted;
        
        public event System.EventHandler<Change_EmailForUserIDCompletedEventArgs> Change_EmailForUserIDCompleted;
        
        public event System.EventHandler<Change_UsernameForUserIDCompletedEventArgs> Change_UsernameForUserIDCompleted;
        
        public event System.EventHandler<Change_PasswordForUserIDsCompletedEventArgs> Change_PasswordForUserIDsCompleted;
        
        public event System.EventHandler<Change_EmailForUserIDsCompletedEventArgs> Change_EmailForUserIDsCompleted;
        
        public event System.EventHandler<Change_UsernameForUserIDsCompletedEventArgs> Change_UsernameForUserIDsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginServiceAvailable(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginServiceAvailable(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndServiceAvailable(System.IAsyncResult result) {
            return base.Channel.EndServiceAvailable(result);
        }
        
        private System.IAsyncResult OnBeginServiceAvailable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginServiceAvailable(callback, asyncState);
        }
        
        private object[] OnEndServiceAvailable(System.IAsyncResult result) {
            bool retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndServiceAvailable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnServiceAvailableCompleted(object state) {
            if ((this.ServiceAvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ServiceAvailableCompleted(this, new ServiceAvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ServiceAvailableAsync() {
            this.ServiceAvailableAsync(null);
        }
        
        public void ServiceAvailableAsync(object userState) {
            if ((this.onBeginServiceAvailableDelegate == null)) {
                this.onBeginServiceAvailableDelegate = new BeginOperationDelegate(this.OnBeginServiceAvailable);
            }
            if ((this.onEndServiceAvailableDelegate == null)) {
                this.onEndServiceAvailableDelegate = new EndOperationDelegate(this.OnEndServiceAvailable);
            }
            if ((this.onServiceAvailableCompletedDelegate == null)) {
                this.onServiceAvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnServiceAvailableCompleted);
            }
            base.InvokeAsync(this.onBeginServiceAvailableDelegate, null, this.onEndServiceAvailableDelegate, this.onServiceAvailableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginGenerate_AccountForCredentials(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerate_AccountForCredentials(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndGenerate_AccountForCredentials(System.IAsyncResult result) {
            return base.Channel.EndGenerate_AccountForCredentials(result);
        }
        
        private System.IAsyncResult OnBeginGenerate_AccountForCredentials(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginGenerate_AccountForCredentials(username, password, callback, asyncState);
        }
        
        private object[] OnEndGenerate_AccountForCredentials(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndGenerate_AccountForCredentials(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerate_AccountForCredentialsCompleted(object state) {
            if ((this.Generate_AccountForCredentialsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Generate_AccountForCredentialsCompleted(this, new Generate_AccountForCredentialsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Generate_AccountForCredentialsAsync(string username, string password) {
            this.Generate_AccountForCredentialsAsync(username, password, null);
        }
        
        public void Generate_AccountForCredentialsAsync(string username, string password, object userState) {
            if ((this.onBeginGenerate_AccountForCredentialsDelegate == null)) {
                this.onBeginGenerate_AccountForCredentialsDelegate = new BeginOperationDelegate(this.OnBeginGenerate_AccountForCredentials);
            }
            if ((this.onEndGenerate_AccountForCredentialsDelegate == null)) {
                this.onEndGenerate_AccountForCredentialsDelegate = new EndOperationDelegate(this.OnEndGenerate_AccountForCredentials);
            }
            if ((this.onGenerate_AccountForCredentialsCompletedDelegate == null)) {
                this.onGenerate_AccountForCredentialsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerate_AccountForCredentialsCompleted);
            }
            base.InvokeAsync(this.onBeginGenerate_AccountForCredentialsDelegate, new object[] {
                        username,
                        password}, this.onEndGenerate_AccountForCredentialsDelegate, this.onGenerate_AccountForCredentialsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginGenerate_AccountForEmail(string email, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerate_AccountForEmail(email, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndGenerate_AccountForEmail(System.IAsyncResult result) {
            return base.Channel.EndGenerate_AccountForEmail(result);
        }
        
        private System.IAsyncResult OnBeginGenerate_AccountForEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginGenerate_AccountForEmail(email, password, callback, asyncState);
        }
        
        private object[] OnEndGenerate_AccountForEmail(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndGenerate_AccountForEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerate_AccountForEmailCompleted(object state) {
            if ((this.Generate_AccountForEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Generate_AccountForEmailCompleted(this, new Generate_AccountForEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Generate_AccountForEmailAsync(string email, string password) {
            this.Generate_AccountForEmailAsync(email, password, null);
        }
        
        public void Generate_AccountForEmailAsync(string email, string password, object userState) {
            if ((this.onBeginGenerate_AccountForEmailDelegate == null)) {
                this.onBeginGenerate_AccountForEmailDelegate = new BeginOperationDelegate(this.OnBeginGenerate_AccountForEmail);
            }
            if ((this.onEndGenerate_AccountForEmailDelegate == null)) {
                this.onEndGenerate_AccountForEmailDelegate = new EndOperationDelegate(this.OnEndGenerate_AccountForEmail);
            }
            if ((this.onGenerate_AccountForEmailCompletedDelegate == null)) {
                this.onGenerate_AccountForEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerate_AccountForEmailCompleted);
            }
            base.InvokeAsync(this.onBeginGenerate_AccountForEmailDelegate, new object[] {
                        email,
                        password}, this.onEndGenerate_AccountForEmailDelegate, this.onGenerate_AccountForEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginGenerate_AccountForUser(Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account obj, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerate_AccountForUser(obj, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndGenerate_AccountForUser(System.IAsyncResult result) {
            return base.Channel.EndGenerate_AccountForUser(result);
        }
        
        private System.IAsyncResult OnBeginGenerate_AccountForUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account obj = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account)(inValues[0]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginGenerate_AccountForUser(obj, callback, asyncState);
        }
        
        private object[] OnEndGenerate_AccountForUser(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndGenerate_AccountForUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerate_AccountForUserCompleted(object state) {
            if ((this.Generate_AccountForUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Generate_AccountForUserCompleted(this, new Generate_AccountForUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Generate_AccountForUserAsync(Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account obj) {
            this.Generate_AccountForUserAsync(obj, null);
        }
        
        public void Generate_AccountForUserAsync(Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account obj, object userState) {
            if ((this.onBeginGenerate_AccountForUserDelegate == null)) {
                this.onBeginGenerate_AccountForUserDelegate = new BeginOperationDelegate(this.OnBeginGenerate_AccountForUser);
            }
            if ((this.onEndGenerate_AccountForUserDelegate == null)) {
                this.onEndGenerate_AccountForUserDelegate = new EndOperationDelegate(this.OnEndGenerate_AccountForUser);
            }
            if ((this.onGenerate_AccountForUserCompletedDelegate == null)) {
                this.onGenerate_AccountForUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerate_AccountForUserCompleted);
            }
            base.InvokeAsync(this.onBeginGenerate_AccountForUserDelegate, new object[] {
                        obj}, this.onEndGenerate_AccountForUserDelegate, this.onGenerate_AccountForUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginGenerate_AccountsForUsers(System.Collections.Generic.List<Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account> objs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerate_AccountsForUsers(objs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndGenerate_AccountsForUsers(System.IAsyncResult result) {
            return base.Channel.EndGenerate_AccountsForUsers(result);
        }
        
        private System.IAsyncResult OnBeginGenerate_AccountsForUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account> objs = ((System.Collections.Generic.List<Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account>)(inValues[0]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginGenerate_AccountsForUsers(objs, callback, asyncState);
        }
        
        private object[] OnEndGenerate_AccountsForUsers(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndGenerate_AccountsForUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerate_AccountsForUsersCompleted(object state) {
            if ((this.Generate_AccountsForUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Generate_AccountsForUsersCompleted(this, new Generate_AccountsForUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Generate_AccountsForUsersAsync(System.Collections.Generic.List<Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account> objs) {
            this.Generate_AccountsForUsersAsync(objs, null);
        }
        
        public void Generate_AccountsForUsersAsync(System.Collections.Generic.List<Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account> objs, object userState) {
            if ((this.onBeginGenerate_AccountsForUsersDelegate == null)) {
                this.onBeginGenerate_AccountsForUsersDelegate = new BeginOperationDelegate(this.OnBeginGenerate_AccountsForUsers);
            }
            if ((this.onEndGenerate_AccountsForUsersDelegate == null)) {
                this.onEndGenerate_AccountsForUsersDelegate = new EndOperationDelegate(this.OnEndGenerate_AccountsForUsers);
            }
            if ((this.onGenerate_AccountsForUsersCompletedDelegate == null)) {
                this.onGenerate_AccountsForUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerate_AccountsForUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGenerate_AccountsForUsersDelegate, new object[] {
                        objs}, this.onEndGenerate_AccountsForUsersDelegate, this.onGenerate_AccountsForUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginDelete_AccountForUserID(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDelete_AccountForUserID(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndDelete_AccountForUserID(System.IAsyncResult result) {
            return base.Channel.EndDelete_AccountForUserID(result);
        }
        
        private System.IAsyncResult OnBeginDelete_AccountForUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginDelete_AccountForUserID(id, callback, asyncState);
        }
        
        private object[] OnEndDelete_AccountForUserID(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndDelete_AccountForUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDelete_AccountForUserIDCompleted(object state) {
            if ((this.Delete_AccountForUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Delete_AccountForUserIDCompleted(this, new Delete_AccountForUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Delete_AccountForUserIDAsync(int id) {
            this.Delete_AccountForUserIDAsync(id, null);
        }
        
        public void Delete_AccountForUserIDAsync(int id, object userState) {
            if ((this.onBeginDelete_AccountForUserIDDelegate == null)) {
                this.onBeginDelete_AccountForUserIDDelegate = new BeginOperationDelegate(this.OnBeginDelete_AccountForUserID);
            }
            if ((this.onEndDelete_AccountForUserIDDelegate == null)) {
                this.onEndDelete_AccountForUserIDDelegate = new EndOperationDelegate(this.OnEndDelete_AccountForUserID);
            }
            if ((this.onDelete_AccountForUserIDCompletedDelegate == null)) {
                this.onDelete_AccountForUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDelete_AccountForUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginDelete_AccountForUserIDDelegate, new object[] {
                        id}, this.onEndDelete_AccountForUserIDDelegate, this.onDelete_AccountForUserIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginDelete_AccountsForUserIDs(System.Collections.Generic.List<int> ids, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDelete_AccountsForUserIDs(ids, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndDelete_AccountsForUserIDs(System.IAsyncResult result) {
            return base.Channel.EndDelete_AccountsForUserIDs(result);
        }
        
        private System.IAsyncResult OnBeginDelete_AccountsForUserIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<int> ids = ((System.Collections.Generic.List<int>)(inValues[0]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginDelete_AccountsForUserIDs(ids, callback, asyncState);
        }
        
        private object[] OnEndDelete_AccountsForUserIDs(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndDelete_AccountsForUserIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDelete_AccountsForUserIDsCompleted(object state) {
            if ((this.Delete_AccountsForUserIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Delete_AccountsForUserIDsCompleted(this, new Delete_AccountsForUserIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Delete_AccountsForUserIDsAsync(System.Collections.Generic.List<int> ids) {
            this.Delete_AccountsForUserIDsAsync(ids, null);
        }
        
        public void Delete_AccountsForUserIDsAsync(System.Collections.Generic.List<int> ids, object userState) {
            if ((this.onBeginDelete_AccountsForUserIDsDelegate == null)) {
                this.onBeginDelete_AccountsForUserIDsDelegate = new BeginOperationDelegate(this.OnBeginDelete_AccountsForUserIDs);
            }
            if ((this.onEndDelete_AccountsForUserIDsDelegate == null)) {
                this.onEndDelete_AccountsForUserIDsDelegate = new EndOperationDelegate(this.OnEndDelete_AccountsForUserIDs);
            }
            if ((this.onDelete_AccountsForUserIDsCompletedDelegate == null)) {
                this.onDelete_AccountsForUserIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDelete_AccountsForUserIDsCompleted);
            }
            base.InvokeAsync(this.onBeginDelete_AccountsForUserIDsDelegate, new object[] {
                        ids}, this.onEndDelete_AccountsForUserIDsDelegate, this.onDelete_AccountsForUserIDsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginDisable_AccountsForUserID(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisable_AccountsForUserID(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndDisable_AccountsForUserID(System.IAsyncResult result) {
            return base.Channel.EndDisable_AccountsForUserID(result);
        }
        
        private System.IAsyncResult OnBeginDisable_AccountsForUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginDisable_AccountsForUserID(id, callback, asyncState);
        }
        
        private object[] OnEndDisable_AccountsForUserID(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndDisable_AccountsForUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDisable_AccountsForUserIDCompleted(object state) {
            if ((this.Disable_AccountsForUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Disable_AccountsForUserIDCompleted(this, new Disable_AccountsForUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Disable_AccountsForUserIDAsync(int id) {
            this.Disable_AccountsForUserIDAsync(id, null);
        }
        
        public void Disable_AccountsForUserIDAsync(int id, object userState) {
            if ((this.onBeginDisable_AccountsForUserIDDelegate == null)) {
                this.onBeginDisable_AccountsForUserIDDelegate = new BeginOperationDelegate(this.OnBeginDisable_AccountsForUserID);
            }
            if ((this.onEndDisable_AccountsForUserIDDelegate == null)) {
                this.onEndDisable_AccountsForUserIDDelegate = new EndOperationDelegate(this.OnEndDisable_AccountsForUserID);
            }
            if ((this.onDisable_AccountsForUserIDCompletedDelegate == null)) {
                this.onDisable_AccountsForUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisable_AccountsForUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginDisable_AccountsForUserIDDelegate, new object[] {
                        id}, this.onEndDisable_AccountsForUserIDDelegate, this.onDisable_AccountsForUserIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginDisable_AccountsForUserIDs(System.Collections.Generic.List<int> ids, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisable_AccountsForUserIDs(ids, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndDisable_AccountsForUserIDs(System.IAsyncResult result) {
            return base.Channel.EndDisable_AccountsForUserIDs(result);
        }
        
        private System.IAsyncResult OnBeginDisable_AccountsForUserIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<int> ids = ((System.Collections.Generic.List<int>)(inValues[0]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginDisable_AccountsForUserIDs(ids, callback, asyncState);
        }
        
        private object[] OnEndDisable_AccountsForUserIDs(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndDisable_AccountsForUserIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDisable_AccountsForUserIDsCompleted(object state) {
            if ((this.Disable_AccountsForUserIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Disable_AccountsForUserIDsCompleted(this, new Disable_AccountsForUserIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Disable_AccountsForUserIDsAsync(System.Collections.Generic.List<int> ids) {
            this.Disable_AccountsForUserIDsAsync(ids, null);
        }
        
        public void Disable_AccountsForUserIDsAsync(System.Collections.Generic.List<int> ids, object userState) {
            if ((this.onBeginDisable_AccountsForUserIDsDelegate == null)) {
                this.onBeginDisable_AccountsForUserIDsDelegate = new BeginOperationDelegate(this.OnBeginDisable_AccountsForUserIDs);
            }
            if ((this.onEndDisable_AccountsForUserIDsDelegate == null)) {
                this.onEndDisable_AccountsForUserIDsDelegate = new EndOperationDelegate(this.OnEndDisable_AccountsForUserIDs);
            }
            if ((this.onDisable_AccountsForUserIDsCompletedDelegate == null)) {
                this.onDisable_AccountsForUserIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisable_AccountsForUserIDsCompleted);
            }
            base.InvokeAsync(this.onBeginDisable_AccountsForUserIDsDelegate, new object[] {
                        ids}, this.onEndDisable_AccountsForUserIDsDelegate, this.onDisable_AccountsForUserIDsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginChange_PasswordForUserID(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChange_PasswordForUserID(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndChange_PasswordForUserID(System.IAsyncResult result) {
            return base.Channel.EndChange_PasswordForUserID(result);
        }
        
        private System.IAsyncResult OnBeginChange_PasswordForUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginChange_PasswordForUserID(id, callback, asyncState);
        }
        
        private object[] OnEndChange_PasswordForUserID(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndChange_PasswordForUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChange_PasswordForUserIDCompleted(object state) {
            if ((this.Change_PasswordForUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Change_PasswordForUserIDCompleted(this, new Change_PasswordForUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Change_PasswordForUserIDAsync(int id) {
            this.Change_PasswordForUserIDAsync(id, null);
        }
        
        public void Change_PasswordForUserIDAsync(int id, object userState) {
            if ((this.onBeginChange_PasswordForUserIDDelegate == null)) {
                this.onBeginChange_PasswordForUserIDDelegate = new BeginOperationDelegate(this.OnBeginChange_PasswordForUserID);
            }
            if ((this.onEndChange_PasswordForUserIDDelegate == null)) {
                this.onEndChange_PasswordForUserIDDelegate = new EndOperationDelegate(this.OnEndChange_PasswordForUserID);
            }
            if ((this.onChange_PasswordForUserIDCompletedDelegate == null)) {
                this.onChange_PasswordForUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChange_PasswordForUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginChange_PasswordForUserIDDelegate, new object[] {
                        id}, this.onEndChange_PasswordForUserIDDelegate, this.onChange_PasswordForUserIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginChange_EmailForUserID(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChange_EmailForUserID(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndChange_EmailForUserID(System.IAsyncResult result) {
            return base.Channel.EndChange_EmailForUserID(result);
        }
        
        private System.IAsyncResult OnBeginChange_EmailForUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginChange_EmailForUserID(id, callback, asyncState);
        }
        
        private object[] OnEndChange_EmailForUserID(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndChange_EmailForUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChange_EmailForUserIDCompleted(object state) {
            if ((this.Change_EmailForUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Change_EmailForUserIDCompleted(this, new Change_EmailForUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Change_EmailForUserIDAsync(int id) {
            this.Change_EmailForUserIDAsync(id, null);
        }
        
        public void Change_EmailForUserIDAsync(int id, object userState) {
            if ((this.onBeginChange_EmailForUserIDDelegate == null)) {
                this.onBeginChange_EmailForUserIDDelegate = new BeginOperationDelegate(this.OnBeginChange_EmailForUserID);
            }
            if ((this.onEndChange_EmailForUserIDDelegate == null)) {
                this.onEndChange_EmailForUserIDDelegate = new EndOperationDelegate(this.OnEndChange_EmailForUserID);
            }
            if ((this.onChange_EmailForUserIDCompletedDelegate == null)) {
                this.onChange_EmailForUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChange_EmailForUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginChange_EmailForUserIDDelegate, new object[] {
                        id}, this.onEndChange_EmailForUserIDDelegate, this.onChange_EmailForUserIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginChange_UsernameForUserID(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChange_UsernameForUserID(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndChange_UsernameForUserID(System.IAsyncResult result) {
            return base.Channel.EndChange_UsernameForUserID(result);
        }
        
        private System.IAsyncResult OnBeginChange_UsernameForUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginChange_UsernameForUserID(id, callback, asyncState);
        }
        
        private object[] OnEndChange_UsernameForUserID(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndChange_UsernameForUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChange_UsernameForUserIDCompleted(object state) {
            if ((this.Change_UsernameForUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Change_UsernameForUserIDCompleted(this, new Change_UsernameForUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Change_UsernameForUserIDAsync(int id) {
            this.Change_UsernameForUserIDAsync(id, null);
        }
        
        public void Change_UsernameForUserIDAsync(int id, object userState) {
            if ((this.onBeginChange_UsernameForUserIDDelegate == null)) {
                this.onBeginChange_UsernameForUserIDDelegate = new BeginOperationDelegate(this.OnBeginChange_UsernameForUserID);
            }
            if ((this.onEndChange_UsernameForUserIDDelegate == null)) {
                this.onEndChange_UsernameForUserIDDelegate = new EndOperationDelegate(this.OnEndChange_UsernameForUserID);
            }
            if ((this.onChange_UsernameForUserIDCompletedDelegate == null)) {
                this.onChange_UsernameForUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChange_UsernameForUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginChange_UsernameForUserIDDelegate, new object[] {
                        id}, this.onEndChange_UsernameForUserIDDelegate, this.onChange_UsernameForUserIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginChange_PasswordForUserIDs(System.Collections.Generic.List<int> id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChange_PasswordForUserIDs(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndChange_PasswordForUserIDs(System.IAsyncResult result) {
            return base.Channel.EndChange_PasswordForUserIDs(result);
        }
        
        private System.IAsyncResult OnBeginChange_PasswordForUserIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<int> id = ((System.Collections.Generic.List<int>)(inValues[0]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginChange_PasswordForUserIDs(id, callback, asyncState);
        }
        
        private object[] OnEndChange_PasswordForUserIDs(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndChange_PasswordForUserIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChange_PasswordForUserIDsCompleted(object state) {
            if ((this.Change_PasswordForUserIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Change_PasswordForUserIDsCompleted(this, new Change_PasswordForUserIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Change_PasswordForUserIDsAsync(System.Collections.Generic.List<int> id) {
            this.Change_PasswordForUserIDsAsync(id, null);
        }
        
        public void Change_PasswordForUserIDsAsync(System.Collections.Generic.List<int> id, object userState) {
            if ((this.onBeginChange_PasswordForUserIDsDelegate == null)) {
                this.onBeginChange_PasswordForUserIDsDelegate = new BeginOperationDelegate(this.OnBeginChange_PasswordForUserIDs);
            }
            if ((this.onEndChange_PasswordForUserIDsDelegate == null)) {
                this.onEndChange_PasswordForUserIDsDelegate = new EndOperationDelegate(this.OnEndChange_PasswordForUserIDs);
            }
            if ((this.onChange_PasswordForUserIDsCompletedDelegate == null)) {
                this.onChange_PasswordForUserIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChange_PasswordForUserIDsCompleted);
            }
            base.InvokeAsync(this.onBeginChange_PasswordForUserIDsDelegate, new object[] {
                        id}, this.onEndChange_PasswordForUserIDsDelegate, this.onChange_PasswordForUserIDsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginChange_EmailForUserIDs(System.Collections.Generic.List<int> id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChange_EmailForUserIDs(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndChange_EmailForUserIDs(System.IAsyncResult result) {
            return base.Channel.EndChange_EmailForUserIDs(result);
        }
        
        private System.IAsyncResult OnBeginChange_EmailForUserIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<int> id = ((System.Collections.Generic.List<int>)(inValues[0]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginChange_EmailForUserIDs(id, callback, asyncState);
        }
        
        private object[] OnEndChange_EmailForUserIDs(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndChange_EmailForUserIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChange_EmailForUserIDsCompleted(object state) {
            if ((this.Change_EmailForUserIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Change_EmailForUserIDsCompleted(this, new Change_EmailForUserIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Change_EmailForUserIDsAsync(System.Collections.Generic.List<int> id) {
            this.Change_EmailForUserIDsAsync(id, null);
        }
        
        public void Change_EmailForUserIDsAsync(System.Collections.Generic.List<int> id, object userState) {
            if ((this.onBeginChange_EmailForUserIDsDelegate == null)) {
                this.onBeginChange_EmailForUserIDsDelegate = new BeginOperationDelegate(this.OnBeginChange_EmailForUserIDs);
            }
            if ((this.onEndChange_EmailForUserIDsDelegate == null)) {
                this.onEndChange_EmailForUserIDsDelegate = new EndOperationDelegate(this.OnEndChange_EmailForUserIDs);
            }
            if ((this.onChange_EmailForUserIDsCompletedDelegate == null)) {
                this.onChange_EmailForUserIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChange_EmailForUserIDsCompleted);
            }
            base.InvokeAsync(this.onBeginChange_EmailForUserIDsDelegate, new object[] {
                        id}, this.onEndChange_EmailForUserIDsDelegate, this.onChange_EmailForUserIDsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.BeginChange_UsernameForUserIDs(System.Collections.Generic.List<int> id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChange_UsernameForUserIDs(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement.EndChange_UsernameForUserIDs(System.IAsyncResult result) {
            return base.Channel.EndChange_UsernameForUserIDs(result);
        }
        
        private System.IAsyncResult OnBeginChange_UsernameForUserIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<int> id = ((System.Collections.Generic.List<int>)(inValues[0]));
            return ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).BeginChange_UsernameForUserIDs(id, callback, asyncState);
        }
        
        private object[] OnEndChange_UsernameForUserIDs(System.IAsyncResult result) {
            Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket retVal = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement)(this)).EndChange_UsernameForUserIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChange_UsernameForUserIDsCompleted(object state) {
            if ((this.Change_UsernameForUserIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Change_UsernameForUserIDsCompleted(this, new Change_UsernameForUserIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Change_UsernameForUserIDsAsync(System.Collections.Generic.List<int> id) {
            this.Change_UsernameForUserIDsAsync(id, null);
        }
        
        public void Change_UsernameForUserIDsAsync(System.Collections.Generic.List<int> id, object userState) {
            if ((this.onBeginChange_UsernameForUserIDsDelegate == null)) {
                this.onBeginChange_UsernameForUserIDsDelegate = new BeginOperationDelegate(this.OnBeginChange_UsernameForUserIDs);
            }
            if ((this.onEndChange_UsernameForUserIDsDelegate == null)) {
                this.onEndChange_UsernameForUserIDsDelegate = new EndOperationDelegate(this.OnEndChange_UsernameForUserIDs);
            }
            if ((this.onChange_UsernameForUserIDsCompletedDelegate == null)) {
                this.onChange_UsernameForUserIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChange_UsernameForUserIDsCompleted);
            }
            base.InvokeAsync(this.onBeginChange_UsernameForUserIDsDelegate, new object[] {
                        id}, this.onEndChange_UsernameForUserIDsDelegate, this.onChange_UsernameForUserIDsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement CreateChannel() {
            return new AccountManagementClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAccountManagement)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAccountManagement)) {
                return new System.ServiceModel.EndpointAddress("http://localhost/DataVaultService.AccountManagement/AccountManagement.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return AccountManagementClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAccountManagement);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return AccountManagementClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAccountManagement);
        }
        
        private class AccountManagementClientChannel : ChannelBase<Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement>, Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement {
            
            public AccountManagementClientChannel(System.ServiceModel.ClientBase<Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IAccountManagement> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginServiceAvailable(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ServiceAvailable", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndServiceAvailable(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ServiceAvailable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGenerate_AccountForCredentials(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("Generate_AccountForCredentials", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndGenerate_AccountForCredentials(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Generate_AccountForCredentials", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGenerate_AccountForEmail(string email, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = email;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("Generate_AccountForEmail", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndGenerate_AccountForEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Generate_AccountForEmail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGenerate_AccountForUser(Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account obj, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = obj;
                System.IAsyncResult _result = base.BeginInvoke("Generate_AccountForUser", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndGenerate_AccountForUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Generate_AccountForUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGenerate_AccountsForUsers(System.Collections.Generic.List<Cross.DataVault.ServiceAccess.PCL.AccountManagerService.Account> objs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = objs;
                System.IAsyncResult _result = base.BeginInvoke("Generate_AccountsForUsers", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndGenerate_AccountsForUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Generate_AccountsForUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDelete_AccountForUserID(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("Delete_AccountForUserID", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndDelete_AccountForUserID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Delete_AccountForUserID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDelete_AccountsForUserIDs(System.Collections.Generic.List<int> ids, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ids;
                System.IAsyncResult _result = base.BeginInvoke("Delete_AccountsForUserIDs", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndDelete_AccountsForUserIDs(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Delete_AccountsForUserIDs", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDisable_AccountsForUserID(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("Disable_AccountsForUserID", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndDisable_AccountsForUserID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Disable_AccountsForUserID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDisable_AccountsForUserIDs(System.Collections.Generic.List<int> ids, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ids;
                System.IAsyncResult _result = base.BeginInvoke("Disable_AccountsForUserIDs", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndDisable_AccountsForUserIDs(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Disable_AccountsForUserIDs", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChange_PasswordForUserID(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("Change_PasswordForUserID", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndChange_PasswordForUserID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Change_PasswordForUserID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChange_EmailForUserID(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("Change_EmailForUserID", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndChange_EmailForUserID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Change_EmailForUserID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChange_UsernameForUserID(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("Change_UsernameForUserID", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndChange_UsernameForUserID(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Change_UsernameForUserID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChange_PasswordForUserIDs(System.Collections.Generic.List<int> id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("Change_PasswordForUserIDs", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndChange_PasswordForUserIDs(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Change_PasswordForUserIDs", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChange_EmailForUserIDs(System.Collections.Generic.List<int> id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("Change_EmailForUserIDs", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndChange_EmailForUserIDs(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Change_EmailForUserIDs", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChange_UsernameForUserIDs(System.Collections.Generic.List<int> id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("Change_UsernameForUserIDs", _args, callback, asyncState);
                return _result;
            }
            
            public Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket EndChange_UsernameForUserIDs(System.IAsyncResult result) {
                object[] _args = new object[0];
                Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket _result = ((Cross.DataVault.ServiceAccess.PCL.AccountManagerService.IdentityPacket)(base.EndInvoke("Change_UsernameForUserIDs", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IAccountManagement,
        }
    }
}
